{"version":3,"sources":["components/Words.jsx","components/KeyPressed.jsx","components/Time.jsx","components/App.jsx","index.js"],"names":["generate","Array","fill","map","_","faker","random","word","join","useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","currentTime","Date","getTime","defaultProps","borderColor","m","border","style","width","height","initialWords","App","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","startTime","setStartTime","wordCount","setWordCount","keyCount","setKeyCount","wpm","setWpm","kpm","setKpm","accuracy","setAccuracy","typedChars","setTypedChars","keyDurationInMinutes","toFixed","updatedOutgoingChars","updatedIncomingChars","updatedTypedChars","substring","split","durationInMinutes","Box","display","justifyContent","bgcolor","borderRadius","className","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d63ad8e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport faker from \"faker\";\r\n\r\nfunction generate() {\r\n  const count = 10;\r\n  return new Array(count)\r\n    .fill()\r\n    .map((_) => faker.random.word())\r\n    .join(\" \");\r\n}\r\nexport default generate;\r\n","import React,{ useState, useEffect } from 'react';\r\n\r\n\r\n//1\r\nconst useKeyPress = callback => {\r\n  //2\r\n  const [keyPressed, setKeyPressed] = useState();\r\n  //3\r\n  useEffect(() => {\r\n    //4\r\n    const downHandler = ({ key }) => {\r\n      if (keyPressed !== key && key.length === 1) {\r\n        setKeyPressed(key);\r\n        callback && callback(key);\r\n      }\r\n    };\r\n    //5\r\n    const upHandler = () => {\r\n      setKeyPressed(null);\r\n    };\r\n\r\n    //6\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n\r\n    return () => {\r\n      //7\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  });\r\n  //8\r\n  return keyPressed;\r\n};\r\n\r\nexport default useKeyPress;","import React from \"react\";\r\n\r\nfunction currentTime() {\r\n  const curTime = new Date().getTime();\r\n  return curTime;\r\n}\r\nexport default currentTime;\r\n","import React, { useState } from \"react\";\r\nimport generate from \"./Words\";\r\nimport useKeyPress from \"./KeyPressed\";\r\nimport currentTime from \"./Time\";\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst defaultProps = {\r\n  \r\n  borderColor: 'text.primary',\r\n  m: 1,\r\n  border: 1,\r\n  style: { width: '50rem', height: '15rem' },\r\n  \r\n};\r\n\r\nconst initialWords = generate();\r\n\r\nfunction App() {\r\n  const [leftPadding, setLeftPadding] = useState(\r\n    new Array(20).fill(\" \").join(\"\")\r\n  );\r\n  const [outgoingChars, setOutgoingChars] = useState(\"\");\r\n  const [currentChar, setCurrentChar] = useState(initialWords.charAt(0));\r\n  const [incomingChars, setIncomingChars] = useState(initialWords.substr(1));\r\n  const [startTime, setStartTime] = useState();\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [keyCount, setKeyCount] = useState(0);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [kpm, setKpm] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [typedChars, setTypedChars] = useState(\"\");\r\n\r\n  useKeyPress((key) => {\r\n    if (!startTime) {\r\n      setStartTime(currentTime());\r\n    }\r\n    //CPM\r\n    setKeyCount(keyCount + 1);\r\n    const keyDurationInMinutes = (currentTime() - startTime) / 60000.0;\r\n\r\n    setKpm(((keyCount + 1) / keyDurationInMinutes).toFixed(2));\r\n\r\n    let updatedOutgoingChars = outgoingChars;\r\n    let updatedIncomingChars = incomingChars;\r\n    const updatedTypedChars = typedChars + key;\r\n    setTypedChars(updatedTypedChars);\r\n\r\n    setAccuracy(\r\n      ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(\r\n        2\r\n      )\r\n    );\r\n\r\n    if (key === currentChar) {\r\n      if (leftPadding.length > 0) {\r\n        setLeftPadding(leftPadding.substring(1));\r\n      }\r\n\r\n      updatedOutgoingChars += currentChar;\r\n      setOutgoingChars(updatedOutgoingChars);\r\n\r\n      setCurrentChar(incomingChars.charAt(0));\r\n\r\n      updatedIncomingChars = incomingChars.substring(1);\r\n      if (updatedIncomingChars.split(\" \").length < 10) {\r\n        updatedIncomingChars += \" \" + generate();\r\n      }\r\n      setIncomingChars(updatedIncomingChars);\r\n\r\n      //WPM\r\n      if (incomingChars.charAt(0) === \" \") {\r\n        setWordCount(wordCount + 1);\r\n\r\n        const durationInMinutes = (currentTime() - startTime) / 60000.0;\r\n\r\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Box  display=\"flex\" justifyContent=\"center\"> <Box bgcolor=\"#322f3d\" borderRadius={16} {...defaultProps}><div className=\"App\">\r\n      <p className=\"Character\">\r\n        <span className=\"Character-out charStyle\">\r\n          {(leftPadding + outgoingChars).slice(-20)}\r\n        </span>\r\n        <span className=\"Character-current charStyle\">{currentChar}</span>\r\n        <span className=\"charStyle\">{incomingChars.substr(0, 20)}</span>\r\n      </p>\r\n      <h3>\r\n        WPM: {wpm} | ACC: {accuracy} % | KPM: {kpm}\r\n      </h3>\r\n    </div>\r\n    </Box>\r\n    </Box>\r\n  );\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\"\r\n\r\nReactDOM.render(<App />,document.getElementById(\"root\"));"],"sourceRoot":""}